<?php
/**
 * Created by IntelliJ IDEA.
 * User: Administrator
 * Date: 2019/2/1
 * Time: 12:03
 */

namespace app\index\controller;

use app\index\model\AliPay;
use app\index\model\Order as OrderModel;
use app\index\model\User;
use think\Controller;


class Order extends Controller
{
    protected $set = [];

    protected $charset = 'utf-8';

//    protected $return_type;

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->set = get_config();
//        $this->return_type = input('path.type');
    }

    public function index()
    {
        $queryArr = input();
        $this->charset = strtolower($queryArr['_input_charset']);
        unset($queryArr['_input_charset']);
        $pid = $queryArr['pid'];
        if (empty($pid))
        {
            return '您未配置支付信息！';
        }
        if (empty($pid))
        {
            $this->error('商户ID不存在');
        }
        $user = User::get(['pid' => $pid]);//halt($user['id']);
        if (empty($user -> uid))
        {
            $this->error('该商户不存在');
        }
        if ($user -> active == 0)
        {
            $this->error('商户已封禁，无法支付！');
        }

        //都是一路POST不用encode
        $type = daddslashes($queryArr['type']);
        $out_trade_no = daddslashes($queryArr['out_trade_no']);
        $notify_url = strip_tags(daddslashes($queryArr['notify_url']));
        $return_url = strip_tags(daddslashes($queryArr['return_url']));
        $name = strip_tags(daddslashes($queryArr['name']));
        $money = daddslashes($queryArr['money']);
        $sitename = daddslashes($queryArr['sitename']);

        //编成字符串
        $prestr = createLinkstring(argSort(paraFilter($queryArr)));trace($prestr);

        //md5签名校验
        if (!md5Verify($prestr, $queryArr['sign'], $user -> key)) {
            $this->error('签名校验失败，请返回重试！');
        }

        if (empty($out_trade_no)) {
            $this->error('订单号(out_trade_no)不能为空');
        }
        if (empty($notify_url)) {
            $this->error('通知地址(notify_url)不能为空');
        }
        if (empty($return_url)) {
            $this->error('回调地址(return_url)不能为空');
        }
        if (empty($name)) {
            $this->error('商品名称(name)不能为空');
        }
        if (empty($money)) {
            $this->error('金额(money)不能为空');
        }
        if ($money <= 0 || !is_numeric($money)) {
            $this->error('金额不合法');
        }
        if (!preg_match('/^[a-zA-Z0-9.\\_\\-|]+$/', $out_trade_no)) {
            $this->error('订单号(out_trade_no)格式不正确');
        }
        switch ($type)
        {
            case 'alipay':
            case 'wxpay':
            case 'qqpay':
            case 'tenpay':
                break;
            default:
                $this->error('支付类型错误');
        }
        //编码转换
        if ($this->charset != 'utf-8')
        {
            $out = re_charset([$name,$sitename]);
            $name = $out[0];
            $sitename = $out[1];
        }


        $off_keywords_arr = explode($this->set['off_keywords_division'],$this->set['off_keywords']);
        foreach ($off_keywords_arr as $item) {
            if (str_exists($name,$item))$this->error('非法商品名');
        }

        $trade_no = date("YmdHis") . rand(11111, 99999);//本站交易号
        $domain = get_domain($notify_url);

        //校验完毕。开始创建订单
        $order = new OrderModel([
            'trade_no' => $trade_no,
            'out_trade_no' => $out_trade_no,
            'notify_url' => $notify_url,//这个是发起者的异步通知url
            'return_url' => $return_url,
            'type' => $type,
            'pid' => $pid,
            'createtime' => '',
            'name' => $name,
            'money' => $money,
            'domain' => $domain,
            'sitename' => $sitename,
            'ip' => $this->request -> ip(),
            'status' => 0
        ]);
        $order -> save();

        if (empty($order -> id))
        {
            $this->error('创建订单失败，请返回重试！');
        }

        $pay = '';
        if ($type == 'alipay')
        {
            $pay = new AliPay();
//            $order -> type = $type;
            $pay -> order = $order;
            return $pay -> make();
        }
    }

    public function defaultPay()
    {

    }

    public function notify($type)
    {
        $input = input('get.');
        if ($input['type'] == 'alipay')
        {
            $pay = new AliPay();
            $pay -> type = $type;
            $pay -> order = $input;
            return $pay -> notify();
        }
    }

    public function returned($type)
    {
        $input = input('get.');
        if ($input['type'] == 'alipay')
        {
            $pay = new AliPay();
            $pay -> type = $type;
            $pay -> order = $input;
            return $pay -> returned();
        }
    }
}