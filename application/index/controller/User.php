<?php
/**
 * Created by IntelliJ IDEA.
 * User: Administrator
 * Date: 2019/1/29
 * Time: 22:15
 */

namespace app\index\controller;


//use \mailer\PHPMailer;
use app\index\model\FindCode;
use app\index\model\LoginLog;
use app\index\model\RegCode;
use think\Request;
use think\Session;
use app\index\model\User as UserModel;
use think\Validate;
use base\Email;

class User extends Base
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        if ($this->request->action() != 'login' && $this->request->action() != 'reg' && $this->request->action() != 'find') {
            $this->checkLogin();
        }
    }

    /**
     * 注册功能
     * @return string|\think\response\View
     * @throws \think\Exception
     * @throws \think\exception\DbException
     */
    public function reg()
    {
        $username = input('post.username');Session::delete('reg_submit_time');
        $pwd = input('post.pwd');
        $code = input('post.code');
        if (empty($username) && empty($pwd) && empty($code))return view('',['title' => '注册账号']);
        $phone = input('post.phone');
        $email = input('post.email');
        $reg_code = RegCode::get(Session::get('send_id'));

        if ($this->set['reg_open'] != 'open')
        {
            $this->error('系统暂未开放注册');
        }
        if (!ajax_check_token(input('post.__token__')))
        {
            $this->error('系统检测到恶意请求，已自动屏蔽');
        }
        if (Session::get('reg_submit_time') > time()-600)$this->error('请勿频繁注册');

        //TODO:推广

        if (UserModel::scope('email',$email) -> count() > 0 && $this->set['reg_verify_type'] == 0)
        {
            $this->error('该邮箱已经注册过账号，如需找回账号信息，请返回登录页面点击找回账号');
        }
        elseif (UserModel::scope('phone',$phone) -> count() > 0 && $this->set['reg_verify_type'] == 1)
        {
            $this->error('该手机号已经注册过账号，如需找回账号信息，请返回登录页面点击找回账号');
        }
        elseif (UserModel::scope('username',$username) -> count() > 0)
        {
            $this->error('该用户名已经注册过账号，如需找回账号信息，请返回登录页面点击找回账号');
        }

        //校验验证码
        $verify_code = $reg_code['code'];
        if ($verify_code != $code) {
            $this->error('验证码错误');
        } else {
            $user = new UserModel();
            //注册类型
            $this->set['reg_verify_type'] == 1?$validate = 'regWithPhone':$validate = 'regWithEmail';
            //过滤并验证表单
            if ($user -> validate('User.'.$validate) -> allowField(['username','pwd','phone','email']) -> save(input('post.'))) {
                $sub = '注册信息 - '.$this->set['web_title'];
                $msg = '账户UID：'.$user -> uid.'<br>用户名：'.stripslashes($user -> username).'<br>密码：'.stripslashes($pwd);
                //给通知后异步发送邮件
                /*Session::set('reg_post.email',$email);
                Session::set('reg_post.content',$msg);
                Session::set('reg_post.title',$sub);*/
                $emailer = new Email();
                $emailer -> SendHtml([
                    'email' => $email,
                    'content' => $msg,
                    'title' => $sub
                ]);
                Session::set('reg_submit_time',time());
                return $this->autoOut(['code' => 1, 'uid' => $user->uid, 'pwd' => stripslashes($pwd), 'username' => stripslashes($user -> username)]);
            }
            else
            {
                $this->error('注册失败:'.$user -> getError());
            }
        }


    }

    /**
     * 找回账号
     * @return string|\think\response\View
     * @throws \think\exception\DbException
     */
    public function find()
    {
        $username = input('post.username');
        $email = input('post.email');
        $code = input('post.code');//trace($code);
        if (empty($username) && empty($emailorphone) && empty($code)) {
            return view('',['title' => '找回账号']);
        }
        if (empty($username)) {
            $this->error('请输入要找回账号的用户名');
        } elseif (empty($email)) {
            $this->error('请输入要找回账号的邮箱');
        } elseif (empty($code)) {
            $this->error('请输入验证码');
        }
        if (!$this->validate(['email' => $email,'code' => $code],'Code.email'))
        {
            $this->error('邮箱格式错误');
        }
        if (!captcha_check($code))$this->error('验证码错误');

        $user = UserModel::get(['username' => $username,'email' => $email]);
        if (empty($user['uid']))$this->error('账号不存在，如需找回请联系客服');

        $sub = $this->set['web_title'].' - 用户信息找回';
        $msg = <<<EMAIL
用户信息找回<br>
您的UID：{$user['uid']}<br>
您的用户名：{$user['username']}<br>
您的密码：123456<br>
EMAIL;
        if ($user['is_trader'] == 1)
        {
            $msg .= '您的商户ID：'.$user['pid'].'<br>您的商户KEY：'.$user['key'].'<br>';
        }

        $msg .= '官网：<a href="'.$this->request -> domain().'" target="_blank">'.$this->request -> domain().
            '</a><br/>【<a href="'.$this->request -> domain().'" target="_blank">用户中心</a>】';

//        $result = send_mail($email,$sub,$msg);
        $e = new Email();
        $result = $e -> SendHtml([
            'email' => $email,
            'title' => $sub,
            'content' => $msg
        ]);
        if ($result)
        {
            if ($user -> save(['pwd' => '123456']))//pwd:e10adc3949ba59abbe56e057f20f883e
            {
                return $this->autoOut(['code' => 1,'msg' => 'succ']);
            }
            else
            {
                return $this->autoOut(['code' => 0,'msg' => '重置密码失败']);
            }
        }
        else
        {
            return $this->autoOut(['code' => 0,'msg' => '邮件发送失败']);
        }
    }

    /**
     * 登录功能
     * @return \think\response\View
     * @throws \think\exception\DbException
     */
    public function login()
    {
        //防止数据错乱
        if ((Session::has('uid') && time() - Session::get('login_time') > 1 * 24 * 60 * 60) || (!Session::has('uid') && time() - Session::get('login_time') <= 1 * 24 * 60 * 60)) {
            Session::delete('uid');
            Session::delete('login_time');
        }
        //检查是否登录
        if (Session::has('uid'))
        {
            if (UserModel::get(Session::get('uid')))
            {
                $this->success('您已登录','console');
            }
        }
        $username = input('post.username');
        $pwd = input('post.pwd');
        if (empty($username)) {
            $username = base64_decode(input('route.username'));
        }
        if (empty($pwd)) {
            $pwd = base64_decode(input('route.pwd'));
        }

        if (empty($username) && empty($pwd)) {
            return view('', ['username' => $username,'title' => '登录']);
        }
//        dump($username);
//        dump($pwd);
//        halt(md5($username));
        $user = UserModel::get(['username' => $username, 'pwd' => md5($pwd),'delete_time' => null]);//取数据时候TP会自动过滤
        if ($user) {
            $login_log = new LoginLog();
            if ($login_log  -> validate('LoginLog') -> allowField('uid') -> save(['uid' => $user->uid,'__token__' => input('post.__token__')]))
            {
                Session::set('uid', $user->uid);
                Session::set('login_time', time());
                Session::set('login_log_id', $login_log->id);
                $this->success('登录成功', 'console');
            }
            else
            {
                $this->error($login_log -> getError());
            }

        } else {
            $this->error('登录失败');
        }


    }

    /**
     * 退出登录
     */
    public function loginOut()
    {
        Session::set('uid');
        Session::set('login_time', 0);
        $this->success('注销登录成功', 'login');
    }

    /**
     * 进入用户中心
     * @return \think\response\View
     * @throws \think\exception\DbException
     */
    public function console()
    {
        $user = UserModel::get(Session::get('uid'));
        if (!$user) {
            $this->error('请先登录');
        }
        return view('', ['breadcrumbs' => 'display:none;']);
    }

    /**
     * 跳转到用户中心
     */
    public function index()
    {
        $this->success('您已登录', 'console');

    }

    /**
     * 用户信息界面
     * @return \think\response\View
     * @throws \think\exception\DbException
     */
    public function userInfo()
    {
        $set = $this->set;
        $route_arr = array(
            $set['web_title'] => $this->request->domain(),
            '账户安全' => '',
            '用户资料' => ''
        );
        return view('', ['breadcrumbs_route' => $route_arr, 'title' => '用户资料', 'user' => UserModel::get(Session::get('uid'))]);
    }

    /**
     * 修改密码
     * @throws \think\exception\DbException
     */
    public function repwd()
    {
        $post = input('post.');
        if (empty($post['old_pwd']) || empty($post['new_pwd']) || empty($post['re_new_pwd'])) {
            $this->error('请确保各项不为空');
        }
        if ($post['old_pwd'] == $post['new_pwd']) $this->error('旧密码和新密码不能重复');
        if ($post['new_pwd'] != $post['re_new_pwd']) $this->error('两次输入密码不一致');
        if (!ajax_check_token($post['__token__']))$this->error('本次请求已被系统拦截');
        $user = UserModel::get(Session::get('uid'));
        if ($user -> pwd == md5($post['old_pwd'])) {
            if ($user->save(['pwd' => $post['new_pwd']])) {
                Session::delete('login_time');
                Session::delete('uid');
                $this->success('修改密码成功');
            } else {
                $this->error('修改密码失败');
            }
        } else {
            $this->error('旧密码输入错误');
        }
    }

    /**
     * 修改收款账号设置
     * @throws \think\exception\DbException
     */
    public function resetBalance()
    {
        $user = UserModel::get(Session::get('uid'));
        if ($user -> validate('User.resetBalance') -> allowField(['balance','account','name']) -> save(input('post.'))) {
            $this->success('修改成功');
        } else {
            $this->error($user -> getError());
        }
    }

    /**
     * 修改联系方式
     * @throws \think\exception\DbException
     */
    public function resetContact()
    {
        $post = input('post.');//trace($post);
        if (empty($post['qq']) || empty($post['url'])) {
            $this->error('确保各项不为空');
        }
        $user = UserModel::get(Session::get('uid'));
        if ($user['qq'] == $post['qq'] && $user['url'] == $post['url'])
        {
            $this->error('请修改后再提交');
        }
        if ($user -> validate('User.resetContact') -> allowField(['qq','url']) -> save($post)) {
            $this->success('修改信息成功');
        } else {

            $this->error($user -> getError());
        }
    }

    /**
     * 重置商户密匙
     * @throws \think\exception\DbException
     */
    public function resetKey()
    {
        $pid = input('post.pid');
        $key = input('post.key');//trace(input('post.'));trace(Session::get('__token__'));
        if (empty($pid) || empty($key)) {
            $this->error('商户id和key不能为空');
        }
        if (!ajax_check_token(input('post.__token__')))$this->error('请求错误');
        if (Session::get('reset_key_submit_time') > time() - 600)
        {
            $this->error('请勿频繁重置商户key');
        }

        $user = UserModel::get(['pid' => $pid, 'key' => $key, 'is_trader' => 1, 'uid' => Session::get('uid')]);
        if (!empty($user->uid)) {
            $user->key = random(32);
            if ($user->save()) {
                Session::set('reset_key_submit_time',time());
                $this->success('重置商户key成功', 'userInfo');
            } else {
                $this->error('重置商户key失败，请联系管理员');
            }
        } else {
            $this->error('请求错误');
        }
    }

    public function loginLog()
    {
        return view('',['breadcrumbs_route' => [
            $this->set['web_title'] => $this->request->domain(),
            '账户安全' => '',
            '登录记录' => ''
        ],'title' => '登录记录']);
    }

    public function orderLog()
    {
        $route_arr = array(
            $this->set['web_title'] => $this->request->domain(),
            '订单记录' => ''
        );
        return view('',['breadcrumbs_route'=> $route_arr,'title' => '订单记录']);
    }

    public function applyTrader()
    {
        return view('',['breadcrumbs_route' => [
            $this->set['web_title'] => $this->request -> domain(),
            '申请商户' => ''
        ],'title' => '申请商户']);
    }

    public function ajaxApplyTrader()
    {

    }




}