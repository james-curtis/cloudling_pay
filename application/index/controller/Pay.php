<?php
/**
 * Created by IntelliJ IDEA.
 * User: Administrator
 * Date: 2019/2/2
 * Time: 13:06
 */

namespace app\index\controller;


//use alipay\Pagepay;
use alipay\AlipayNotify;
use alipay\AlipaySubmit;
use think\Config;
use epay\AlipaySubmit as EPaySubmit;
use epay\AlipayNotify as EPayNotify;

/**
 * 支付类
 * Class Pay
 * @package app\index\controller
 */
class Pay extends Base
{
    /**
     * 编码
     * @var string
     */
    protected $charset = 'utf-8';

    /**
     * 提交订单的参数
     * @var array
     */
    protected $queryParam = [];

    /**
     * 订单对象
     * @var \app\index\model\Order
     */
    private $orderObj;

    /**
     * 支付宝支付配置
     * @var array
     */
    protected $alipayConf = [];

    /**
     * 微信支付配置
     * @var array
     */
    protected $wxpayConf = [];

    /**
     * QQ支付配置
     * @var array
     */
    protected $qqpayConf = [];

    /**
     * 财付通支付配置
     * @var array
     */
    protected $tenpayConf = [];

    /**
     * 异步跳转url
     * @var string
     */
    protected $notify_url = '';

    /**
     * 同步跳转url
     * @var string
     */
    protected $return_url = '';

    /**
     * 自定义商品名
     * @var string
     */
    protected $diy_name = '';

    /**
     * 初始化
     */
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $get_pid = input('get.pid');
        $post_pid = input('post.pid');
        if (!empty($get_pid))
        {
            $this->queryParam = input('get.');
        }
        elseif (!empty($post_pid))
        {
            $this->queryParam = input('post.');
        }
        else
        {
            $this->error('请输入商户信息');
        }

        //自动转换编码
        $this->charset = input('get._input_charset')?input('get._input_charset'):input('post._input_charset');
        $this->charset = strtolower($this->charset);
        if ($this->charset != 'utf-8')
        {
            $this->queryParam = re_charset($this->queryParam,$this->charset);
        }

        //加载配置
        $this->loadConf();
        $this->notify_url = url('notify','','',true);
        $this->return_url = url('returned','','',true);

        //自定义商品名称
        if (!empty($this->set['order_diy_alipay_name'])) {
            $this->diy_name = str_replace('__TIME__', time(), $this->set['order_diy_alipay_name']);
        } else {
            $this->diy_name = $this->set['web_title'] . ' - ' . time();
        }
    }

    /**
     * 加载配置文件
     */
    protected function loadConf()
    {
        //支付宝
        $this->alipayConf['epay'] = $this->alipayConf['alipay'] = [
            'partner' => trim($this->set['alipay_api_partner']),
            'seller_email' => trim($this->set['alipay_api_seller_email']),
            'key' => trim($this->set['alipay_api_key']),
            'sign_type' => 'MD5',
            'input_charset' => 'utf-8',
            'cacert' => getcwd().'\\cacert.pem',//好像没啥用
            'transport' => 'http'
        ];
        //易支付
        $this->alipayConf['epay']['partner'] = $this->set['alipay_epay_api_id'];
        $this->alipayConf['epay']['key'] = $this->set['alipay_epay_api_key'];
        $this->alipayConf['epay']['apiurl'] = $this->set['alipay_epay_api_url'];
        //总设置
        $this->alipayConf['set'] = [
            'api' => $this->set['alipay_api'],
            'partner' => $this->set['alipay_api_partner'],
            'key' => $this->set['alipay_api_key'],
            'seller_email' => $this->set['alipay_api_seller_email'],
            'epay_api_url' => $this->set['alipay_epay_api_url'],
            'epay_api_id' => $this->set['alipay_epay_api_id'],
            'epay_api_key' => $this->set['alipay_epay_api_key'],
            'codepay_api_id' => $this->set['alipay_codepay_api_id'],
            'codepay_api_key' => $this->set['alipay_codepay_api_key'],
            'close_info' => $this->set['alipay_close_info']
        ];

        //微信
        $this->wxpayConf['set'] = [
            'api' => $this->set['wxpay_api'],
            'appid' => $this->set['wxpay_api_appid'],
            'mchid' => $this->set['wxpay_api_mchid'],
            'key' => $this->set['wxpay_api_key'],
            'appsecret' => $this->set['wxpay_api_appsecret'],
            'epay_api_url' => $this->set['wxpay_epay_api_url'],
            'epay_api_id' => $this->set['wxpay_epay_api_id'],
            'epay_api_key' => $this->set['wxpay_epay_api_key'],
            'codepay_api_id' => $this->set['wxpay_codepay_api_id'],
            'codepay_api_key' => $this->set['wxpay_codepay_api_key'],
            'close_info' => $this->set['wxpay_close_info']
        ];

        //QQ
        $this->qqpayConf['set'] = [
            'api' => $this->set['qqpay_api'],
            'mchid' => $this->set['qqpay_api_mchid'],
            'mchkey' => $this->set['qqpay_api_mchkey'],
            'epay_api_url' => $this->set['qqpay_epay_api_url'],
            'epay_api_id' => $this->set['qqpay_epay_api_id'],
            'epay_api_key' => $this->set['qqpay_epay_api_key'],
            'codepay_api_id' => $this->set['qqpay_codepay_api_id'],
            'codepay_api_key' => $this->set['qqpay_codepay_api_key'],
            'close_info' => $this->set['qqpay_close_info']
        ];
    }

    public function index()
    {
        return $this->submit();
    }

    /**
     * 提交订单
     * @return string
     */
    public function submit()
    {
        $this->checkOrder();

        $this->orderObj = new \app\index\model\Order();

        //前置操作：新增订单记录
        $this->beforeCommonPay();
        //支付宝付款
        if ($this->queryParam['type'] == 'alipay')
        {
            //根据本站设置来调用接口
            if ($this->alipayConf['set']['api'] == 'alipay')//支付宝官方
            {
//                import('')














                //兼容手机
                if ($this->request -> isMobile() == true) {
                    $alipay_service = 'alipay.wap.create.direct.pay.by.user';
                } else {
                    $alipay_service = 'create_direct_pay_by_user';
                }
                $parameter = [
                    'service' => $alipay_service,
                    'partner' => $this->alipayConf['alipay']['partner'],
                    'seller_id' => $this->alipayConf['alipay']['partner'],
                    'payment_type' => '1',
                    'notify_url' => $this->notify_url,
                    'return_url' => $this->return_url,
                    'out_trade_no' => $this->orderObj -> trade_no,
                    'subject' => $this->diy_name,
                    'total_fee' => $this->orderObj -> money,
                    '_input_charset' => 'utf-8'//这个是小写
                ];
                if ($this->request -> isMobile() == true) {
                    $parameter['app_pay'] = 'Y';
                }
                $alipaySubmit = new AlipaySubmit($this->alipayConf['alipay']);
                $html_text = $alipaySubmit->buildRequestForm($parameter, 'post', '正在跳转');
                return '<html><body>'.$html_text.'</body></html>';
            }
            else
            {
                $this->commonPay();
            }
        }
        elseif ($this->queryParam['type'] == 'wxpay')//微信付款
        {
            //根据本站设置来调用接口
            if ($this->wxpayConf['set']['api'] == 'wxpay')//支付宝官方
            {

            }
            else
            {
                $this->commonPay();
            }
        }
        elseif ($this->queryParam['type'] == 'qqpay')//QQ付款
        {
            //
        }
        elseif ($this->queryParam['type'] == 'tenpay')//财付通付款
        {
            $this->error('该通道暂时关闭');
        }

    }


    /**
     * 易支付、码支付统一支付
     * @return \epay\提交表单HTML文本
     */
    protected function commonPay()
    {
        $api_type = $this->queryParam['type'];
        $conf_type = $api_type.'Conf';
        if (empty($this->set[$api_type.'_api']))$this->error('error');

        if ($this->set[$api_type.'_api'] == 'epay')//易支付
        {
            //构造要请求的参数数组，无需改动
            $parameter = array(
                'pid' => $this->$conf_type['epay']['partner'],//本站的商户ID
                'type' => $api_type,
                'notify_url' => $this->notify_url,
                'return_url' => $this->return_url,
                'out_trade_no' => $this->orderObj -> trade_no,
                'name' => $this->diy_name,
                'money' => $this->orderObj->money,
                'sitename' => $this->set['web_title'],
                '_input_charset' => strtolower('utf-8')
            );
            //建立请求
            $alipaySubmit = new EPaySubmit($this->$conf_type['epay']);
            $html_text = $alipaySubmit->buildRequestForm($parameter);
            return $html_text;
        }
        elseif ($this->set[$api_type.'_api'] == 'codepay')//码支付
        {

        }
        elseif ($this->set[$api_type.'_api'] == 'close')//关闭该支付通道
        {
            //输出关闭原因
            $this->error($this->set[$api_type.'_close_info']);
        }
        else
        {
            $this->error('error');
        }
    }

    /**
     * 支付前置操作
     */
    protected function beforeCommonPay()
    {
        //创建订单
        if (!$this->orderObj -> validate(true)
                -> allowField(['out_trade_no','notify_url','return_url','type','pid','name','money','sitename'])
                -> save($this->queryParam) !== false)
        {
            $this->error($this->orderObj -> getError());
        }
    }

    /**
     * 易支付、码支付异步跳转
     * @return string
     */
    protected function commonNotify()
    {
        $api_type = $this->orderObj -> type;
        $conf_type = $api_type.'Conf';
        if (empty($this->set[$api_type.'_api']))$this->error('error');

        if ($this->set[$api_type.'_api'] == 'epay')//易支付
        {
            $notify = new EPayNotify($this->$conf_type['epay']);
            $verify_result = $notify->verifyReturn();
            if ($verify_result) //验证成功
            {
                //交易号，即易支付的订单号
                $trade_no = input('get.out_trade_no');

                //易支付的交易号
                $out_trade_no = input('get.trade_no');

                //交易状态
                $trade_status = input('get.trade_status');

                $money = input('get.money');

                $this->orderObj = Order::get(['trade_no' => $trade_no]);

                //进一步验证
                if ($trade_status == 'TRADE_SUCCESS' and $money == $this->orderObj -> money && $this->orderObj->status == 0) {
                    $this->orderObj->status = 1;
                    $this->orderObj->endtime = date('Y-m-d H:i:s');
                    $this->orderObj -> save();

                    $this->addMoney();
                }

                return 'success';
            }
            else
            {
                return 'fail';
            }
        }
        elseif ($this->set[$api_type.'_api'] == 'codepay')//码支付
        {

        }
        elseif ($this->set[$api_type.'_api'] == 'close')//关闭该支付通道
        {
            //输出关闭原因
            $this->error($this->set[$api_type.'_close_info']);
        }
        else
        {
            $this->error('error');
        }

    }

    /**
     * 易支付、码支付同步跳转
     * @return string
     */
    protected function commonReturn()
    {
        $api_type = $this->orderObj -> type;
        $conf_type = $api_type.'Conf';
        if (empty($this->set[$api_type.'_api']))$this->error('error');

        if ($this->set[$api_type.'_api'] == 'epay')//易支付
        {
            //计算得出通知验证结果
            $alipayNotify = new EPayNotify($this->$conf_type['epay']);
            $verify_result = $alipayNotify->verifyNotify();

            if ($verify_result)//验证成功
            {
                $trade_no = input('get.out_trade_no');

                $out_trade_no = input('get.trade_no');

                //交易状态
                $trade_status = input('get.trade_status');

                $money = input('get.money');

                if($trade_status == 'TRADE_SUCCESS' and $money == $this->orderObj -> money) {
                    $url = $this->create_callback_url();
                    return '<script>window.location.href="'.$url['return'].'";</script>';
                }else {
                    return "异常支付已被拦截";
                }

            }
            else
            {
                return "验证失败";
            }
        }
        elseif ($this->set[$api_type.'_api'] == 'codepay')//码支付
        {
            //
        }
        elseif ($this->set[$api_type.'_api'] == 'close')//关闭该支付通道
        {
            //输出关闭原因
            $this->error($this->set[$api_type.'_close_info']);
        }
        else
        {
            $this->error('error');
        }

    }

    /**
     * 检查订单是否可用
     */
    protected function checkOrder()
    {
        $validate = $this->validate($this->queryParam, 'Pay');
        if ($validate !== true)
        {
            $this->error($validate);
        }

        $prestr = createLinkstring(argSort(paraFilter($this->queryParam)));
        $pid = intval($this->queryParam['pid']);
        if (empty($pid)) {
            $this->error('PID不存在');
        }
        $userrow = \app\index\model\User::getByPid($pid);
        if ($userrow['is_trader'] == 0)
        {
            $this->error('该用户还不是商家');
        }
        if (!md5Verify($prestr, $this->queryParam['sign'], $userrow['key'])) {
            $this->error('签名校验失败，请返回重试！');
        }
        if ($userrow['active'] == 0) {
            $this->error('商户已封禁，无法支付！');
        }
        if (empty($this->queryParam['out_trade_no'])) {
            $this->error('订单号(out_trade_no)不能为空');
        }
        if (empty($this->queryParam['notify_url'])) {
            $this->error('通知地址(notify_url)不能为空');
        }
        if (empty($this->queryParam['return_url'])) {
            $this->error('回调地址(return_url)不能为空');
        }
        if (empty($this->queryParam['name'])) {
            $this->error('商品名称(name)不能为空');
        }
        if (empty($this->queryParam['money'])) {
            $this->error('金额(money)不能为空');
        }
        if ($this->queryParam['money'] <= 0 || !is_numeric($this->queryParam['money'])) {
            $this->error('金额不合法');
        }
        if (!preg_match('/^[a-zA-Z0-9.\\_\\-|]+$/', $this->queryParam['out_trade_no'])) {
            $this->error('订单号(out_trade_no)格式不正确');
        }
        $ljarr = explode($this->set['off_keywords_division'], $this->set['off_keywords']);
        foreach ($ljarr as $k => $v) {
            if (strexists($this->queryParam['name'], $v)) {
                $this->error($this->set['off_tips']);
            }
        }
    }

    /**
     * 收到异步通知
     * @return string
     * @throws \think\exception\DbException
     */
    public function notify()
    {
        //本站交易号
        $trade_no = input('post.out_trade_no');

        $this->orderObj = \app\index\model\Order::get($trade_no);

        if ($this->orderObj -> type == 'alipay')//订单最终是支付宝付款
        {
            if ($this->alipayConf['set']['api'] == 'alipay')//支付宝官方支付接口
            {
                //计算得出通知验证结果
                $alipayNotify = new AlipayNotify($this->alipayConf);
                $verify_result = $alipayNotify->verifyNotify();

                if ($verify_result)//验证成功
                {
                    //支付宝交易号
                    $out_trade_no = input('post.trade_no');
                    $type = input('post.type');

                    //交易状态
                    $trade_status = input('post.trade_status');

                    //买家支付宝
                    $buyer_email = input('post.buyer_email');

                    if($trade_status == 'TRADE_FINISHED') {
                        //退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知
                    }
                    else if ($trade_status == 'TRADE_SUCCESS' && $this->orderObj -> status==0) {
                        //付款完成后，支付宝系统发送该交易状态通知
                        $this->orderObj -> save([
                            'status' => 1,
                            'endtime' => date('Y-m-d H:i:s'),
                            'buyer' => $buyer_email
                        ]);
                        $this->addMoney();
                    }

                    return "success";
                }
                else {
                    //验证失败
                    return "fail";
                }
            }
            else
            {
                $this->commonNotify();
            }

        }
        else
        {
            $this->error('错误');
        }
    }

    /**
     * 同步跳转
     */
    public function returned()
    {
        //本站交易号
        $trade_no = input('post.out_trade_no');

        $this->orderObj = \app\index\model\Order::get($trade_no);

        if ($this->orderObj -> type == 'alipay')//订单最终是支付宝付款
        {
            if ($this->alipayConf['set']['api'] == 'alipay')//支付宝官方支付接口
            {
                //计算得出通知验证结果
                $alipayNotify = new AlipayNotify($this->alipayConf);
                $verify_result = $alipayNotify->verifyNotify();

                if ($verify_result)//验证成功
                {
                    //支付宝交易号
                    $out_trade_no = input('post.trade_no');
                    $type = input('post.type');

                    //交易状态
                    $trade_status = input('post.trade_status');

                    //买家支付宝
                    $buyer_email = input('post.buyer_email');

                    if($trade_status == 'TRADE_FINISHED' || $trade_status == 'TRADE_SUCCESS') {
                        //同步校验是否付款
                        if($this->orderObj -> status == 0){
                            $this->orderObj -> save([
                                'status' => 1,
                                'endtime' => date('Y-m-d H:i:s'),
                                'buyer' => $buyer_email
                            ]);
                            $this->addMoney();

                        }
                        $url = $this->create_callback_url();
                        return '<script>window.location.href="'.$url['return'].'";</script>';
                    }
                    else {
                        $this->error($trade_status);
                    }

                }
            }
            else
            {
                $this->commonReturn();
            }
        }
        else
        {
            $this->error('错误');
        }
    }



    /**
     * 给商户增加余额
     */
    protected function addMoney($notify = true)
    {
        //如果自定义了用户的分成比例，则用用户的，否则用全局的
        $user = \app\index\model\User::get(['pid' => $this->orderObj -> pid]);
        $rate = $user -> rate;
        //如果没有自定义用户的分成比例，或者自定义的分成比例大于全局的，或者自定义的分成比例大于等于100，就用全局的
        if (!(!empty($rate) && $rate >= $this->set['pay_money_rate']  && $rate<100))
        {
            $rate = $this->set['pay_money_rate'];
        }

        $add_money = round($user -> money*$rate/100,2);
        $user -> money += $add_money;
        $user -> save();
        if ($notify)
        {
            $this->doNotify();
        }
    }

    /**
     * 给请求的网站异步通知
     * @return bool
     */
    protected function doNotify()
    {
        $return = curl_get($this->create_callback_url()['notify']);
        if(strpos($return,'success')!==false){
            return true;
        }else{
            return false;
        }
    }

    /**
     * 生成回调url
     * @return string
     */
    protected function create_callback_url()
    {
        $order = $this->orderObj;
        $user = User::get(['pid' => $order->pid]);
        $data = $order;
        $array = array(
            'pid' => $user->pid,
            'trade_no' => $data['trade_no'],
            'out_trade_no' => $data['out_trade_no'],
            'type' => $data['type'],
            'name' => $data['name'],
            'money' => $data['money'],
            'trade_status' => 'TRADE_SUCCESS'
        );
        $arg = argSort(paraFilter($array));
        $prestr = createLinkstring($arg);
        $urlstr = createLinkstringUrlencode($arg);
        $sign = md5Sign($prestr, $user->key);
        if (strpos($data['notify_url'], '?'))
            $url['notify'] = $data['notify_url'] . '&' . $urlstr . '&sign=' . $sign . '&sign_type=MD5';
        else
            $url['notify'] = $data['notify_url'] . '?' . $urlstr . '&sign=' . $sign . '&sign_type=MD5';
        if (strpos($data['return_url'], '?'))
            $url['return'] = $data['return_url'] . '&' . $urlstr . '&sign=' . $sign . '&sign_type=MD5';
        else
            $url['return'] = $data['return_url'] . '?' . $urlstr . '&sign=' . $sign . '&sign_type=MD5';
        return $url;
    }

}


















